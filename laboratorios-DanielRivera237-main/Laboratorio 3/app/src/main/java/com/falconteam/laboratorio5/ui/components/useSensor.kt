package com.falconteam.laboratorio5.ui.componentsimport android.annotation.SuppressLintimport android.content.Contextimport android.hardware.Sensorimport android.hardware.SensorEventimport android.hardware.SensorEventListenerimport android.hardware.SensorManagerimport androidx.compose.runtime.*import androidx.compose.ui.platform.LocalContext@SuppressLint("ServiceCast")@Composablefun useSensor(sensorType: Int): List<Float> {    val context = LocalContext.current    val sensorManager = rememberSensorManager(context)    val sensor = sensorManager?.getDefaultSensor(sensorType)    var sensorValues by remember { mutableStateOf(defaultSensorValues()) }    LaunchedSensorListener(sensorManager, sensor, sensorType) { newValues ->        sensorValues = newValues    }    return sensorValues}@Composableprivate fun rememberSensorManager(context: Context): SensorManager? {    return remember {        context.getSystemService(Context.SENSOR_SERVICE) as? SensorManager    }}private fun defaultSensorValues(): List<Float> = listOf(0f, 0f, 0f)@Composableprivate fun LaunchedSensorListener(    sensorManager: SensorManager?,    sensor: Sensor?,    sensorType: Int,    onSensorChanged: (List<Float>) -> Unit) {    if (sensorManager == null || sensor == null) return    DisposableEffect(sensorType) {        val listener = object : SensorEventListener {            override fun onSensorChanged(event: SensorEvent?) {                event?.values?.let { onSensorChanged(it.toList()) }            }            override fun onAccuracyChanged(sensor: Sensor?, accuracy: Int) {}        }        sensorManager.registerListener(listener, sensor, SensorManager.SENSOR_DELAY_UI)        onDispose {            sensorManager.unregisterListener(listener)        }    }}